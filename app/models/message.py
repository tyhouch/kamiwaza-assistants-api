# app/models/message.py

import uuid
from datetime import datetime
from sqlalchemy import (
    Column, String, Integer, JSON, Enum, ForeignKey
)
from sqlalchemy.dialects.postgresql import UUID
from app.database import Base
import enum

class MessageStatus(str, enum.Enum):
    in_progress = "in_progress"
    incomplete = "incomplete"
    completed = "completed"

class Message(Base):
    __tablename__ = "messages"

    # Primary Key
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    # Must always be "thread.message"
    object = Column(String, default="thread.message")

    # Unix timestamp (seconds)
    created_at = Column(Integer, default=lambda: int(datetime.utcnow().timestamp()))

    # Required references
    thread_id = Column(UUID(as_uuid=True), ForeignKey("threads.id"), nullable=False)

    # Optional references
    assistant_id = Column(UUID(as_uuid=True), nullable=True)  # If the assistant authored it
    run_id = Column(UUID(as_uuid=True), nullable=True)        # If this message was generated by a run

    # Metadata for the official doc
    role = Column(String, nullable=False)  # "user" or "assistant"

    # Official docs store content as an array of blocks (JSON)
    # e.g. [ { "type": "text", "text": {"value":"Hello"}} ]
    content = Column(JSON, default=[])
    attachments = Column(JSON, nullable=True)

    # We can store status like "in_progress" if partial
    status = Column(Enum(MessageStatus), default=MessageStatus.completed)
    incomplete_details = Column(JSON, nullable=True)
    completed_at = Column(Integer, nullable=True)
    incomplete_at = Column(Integer, nullable=True)

    # Up to 16 key-value pairs for metadata
    meta_data = Column(JSON, default={})

    def to_dict(self):
        """Convert to official JSON shape."""
        return {
            "id": str(self.id),
            "object": self.object,
            "created_at": self.created_at,
            "assistant_id": str(self.assistant_id) if self.assistant_id else None,
            "thread_id": str(self.thread_id),
            "run_id": str(self.run_id) if self.run_id else None,
            "role": self.role,
            "content": self.content,
            "attachments": self.attachments if self.attachments else [],
            "status": self.status.value if self.status else "completed",
            "incomplete_details": self.incomplete_details,
            "completed_at": self.completed_at,
            "incomplete_at": self.incomplete_at,
            "metadata": self.meta_data if self.meta_data else {}
        }
